[ FileInputStream으로 파일 입력 ]
  1.  FileInputStream 객체 생성
      FileInputStream fis;
      fis = new FileInputStream ("res/data.txt");

  2.  FileInputStream 객체의 서비스 함수
      - read()    : 1번 호출에 1바이트 단위로 읽음
      - skip()    : 
      - write()   :
      - close()   : 버퍼 삭제

  3.  read() 함수 사용
      int value = fis.read();
      '7' '0' ' ' '8' '0'중 '7' 문자코드값(55)이 value 변수에 저장됨
      1바이트 단위로 읽음

  4.  System.out.println(value);          //  value에 담긴 정수 55를 문자로서 '55' 출력
      System.out.println("%c", value);    //  value에 담긴 정수 55를 문자코드값으로서 '7'출력
      System.out.write(value);            //  value에 담긴 정수 55 그대로 출력
                                              콘솔이 문자 '8'로 인식해서 출력


==============================================================================================

[ Scanner 객체로 파일 입력 ]
  1.  FileInputStream 객체 생성
      FileInputStream fis;
      fis = new FileInputStream ("res/data.txt");

  2.  Scanner 객체 생성
      fis(FileInputStream) 객체를 응용하는 응용객체
      Scanner scan = new Scanner(fis);

  3.  Scanner 객체 서비스 함수 사용
      fis 객체가 버퍼에 읽어둔 '7' '0' ' ' '8' '0'을 Scanner 객체의 서비스함수를 사용해서
      여러 형식으로 (string, char, int, float 등) 읽기 가능
      fis 객체를 통해 버퍼로 읽음
      - next()      : 구분자(공백 등)가 있으면 끊어서 문자로 읽음
      - nextLine()  : 버퍼에 있는 내용을 한꺼번에 문자열로 읽음
      - nextInt()   : 문자를 정수로 바꾸어 읽음
  
  4.  객체 삭제
      Scanner 객체 먼저 클로즈 후 FileInputStream 객체 클로즈
      scan.close()
      fis.close()

==============================================================================================

[ Scanner 객체로 콘솔 입력 ]
  - Scanner scan = new Scanner(System.in)
  - 콘솔 입력은 필수 입력으로 이미 객체로 생성되어있다.
  - 입력 스트림 객체 생성할 필요 x
  - System.in : Scanner 객체가 응용해서 서비스 함수 같이 사용
                입력스트림 역할만 수행
    ex) Scanner scan = new Scanner(System.in);
        kor1 = scan.nextInt();    //  사용자가 입력한 정수값을 버퍼에 저장
        kor2 = scan.nextInt();
        kor3 = scan.nextInt();
        scan.close();
        fis.close();

==============================================================================================

[ 코드 지역화 ]
  - 주석 이용해서 코드 블럭 구분  : 언어적으로 지역화되지 않아서 각 변수들이 전역적으로 유일해야함
  - 지역화가 이루어지면 동일한 객체명, 변수명 사용 가능

[ 지역변수의 생명주기 ]
  1.  번역기가 메인메모리에 코드블럭 loading (가장 먼저)
  2.  지역변수는 지역이 진행되는 동안만 사용되고 소멸
        - Garbage Collector가 수거
  3.  MM를 코드 영역 / Heap 영역 / Stack 영역으로 나누어 사용
  4.  Heap 영역   : 객체 영역
  5.  Stack 영역  : 지역변수 영역
  6.  Text 영역   : 코드 영역

==============================================================================================

[ 묵시적 형식 변환 ]
  ex) byte x = 1;           : 0000 0001
      int y = x;            : 0000 0000 0000 0000 0000 0000 0000 0001
  - x, y가 서로 형식이 다르므로 연산이 불가하지만
  - 번역기가 묵시적으로 형식 변환
  - byte 크기가 int 크기 (4byte) 보다 작으므로 x 데이터가 y에 대입은 가능

  ex) int x = 1;          :
      byte y = x;         : 묵시적 형식 변환 불가
                            x 크기(4byte)가 y 보다 크기때문에 컴파일 오류

  ex) float x = 1.0f;     : 
      int y = (int)x;     : x의 소수 부분 사라지고 정수만 취함

==============================================================================================

[ 산술 연산자 ]
  - =   : 대입 연산자
  - +   : 덧셈 연산자
  - -   : 뺄셈 연산자
  - *   : 곱셈 연산자
  - /   : 몫 연산자
  - %   : 나머지 연산자
          - 정수 / 실수 = 실수
          - 정수 / 정수 = 정수 (몫)
          - 10 / 3.0 = 3.33333...

==============================================================================================

[ 단항 연산자 ]
  - 증감  : ++
  - 감소  : --
  - 후위
      x++ : x 사용후 1증가
      x-- : x 사용후 1감소
  - 전위
      ++x : x 사용전 1증가
      --x : x 사용전 1감소

==============================================================================================

[ 비교관계 연산자 ]
  - ==   
  - !=
  - >
  - >=    
  - <     
  - <=    

==============================================================================================

[ 논리 연산자 ]
  - AND   : &&
  - OR    : ||
  - NOT   : !

==============================================================================================

[ 비트 논리 연산자 ]
  - 비트 AND     :  &
  - 비트 OR      :  |
  - 비트 차집합   : ^
  - 비트 NOT     :  ~

==============================================================================================

[ 3항 연산자 ]
  - 비교 교집합 연산자     : 조건문이 TRUE 이면 A / FALSE 이면 B 실행
    (조건문) ? A : B
  - 객체형식 비교 연산자    : scan 객체의 형식이 Scanner이면 TRUE
    scan instanceof Scanner

==============================================================================================

[ 연산자 우선순위 ]
  1.  ++  --
  2.  *   /   %
  3.  +   -
  4.  <   >   <=  >=
  5.  ==  !=
  6.  &
  7.  ^
  8.  |
  9.  &&
  10. ||
  11. ?: