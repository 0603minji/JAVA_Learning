[ 프로그램 구성 ]
  - 프로그램은 모두 장치 이용을 위함
  
  - JAVA Language : 자바 언어
                    연산식 모음

  - Platform API  : 플랫폼이 제공하는 API
                    함수 형태
                    API (Application Platform Interface)
                    함수를 정의하는 부분은 사용자가 알필요없이
                    함수를 호출하는 형태로 사용가능
                    함수 정의 부분은 JAVA Platform에 존재
                    JAVA Platform은 가상 플랫폼 (OS는 실존 플랫폼)

# ===========================================================================

[ CPU는 1개 / 입출력 장치는 여러개 ]
  - ARM : 일반 인텔 CPU계열의 CISC라는 명령어 구조보다
          간단한 RISC라는 명령어 구조 CPU 체계의 한 형식

  - 여러개이고 다양한 입출력 장치 각각에 따르는 언어로 작성할 수 없으므로
    자바 코드는 API를 사용함
  - CPU 제어 부분 : JAVA Language로 작성
  - 입출력 장치 제어 부분 : Platform API로 작성

# ===========================================================================

[ 함수의 특징 ]
  - 함수 = API (X)
  - JAVA Platform API를 함수 형태로 표현한것뿐
  - 코드 파편화
  - 코드 집중화
  - 코드 은닉화
  - 플랫폼이 되려면 API가 필수적
  - 플랫폼은 사용자에게 APP 사용을 위한 기능들을 제공하는 곳

# ===========================================================================

[ Shell ]
  - 내부 명령어
  - 외부 명령어
  - Shell에서 사용가능한 Bash 명령어  :   ls    - 현재 디렉터리의 목록
                                        pwd   - 현재 작업 디렉터리
                                        cd    - 작업 디렉터리 변경
                                        mkdir - 디렉터리 생성
                                        rmdir - 디렉터리 삭제
                                        cp    - 파일 복사
                                        mv    - 파일 이동 또는 이름 변경
                                        rm    - 파일 삭제
                                        cat   - 파일 내용 표시
                                        grap  - 파일에서 특정 문자열 검색
                                        sort  - 파일 내용 정렬

# ===========================================================================

[ 주석 ]
  - 한줄 주석   : //
  - 여러줄 주석 : /* */

# ===========================================================================

[ 자바 번역기는 2개 ]
  - Compiler    : $ javac
                  실행 결과는 .class 파일 (= 중간코드 = 바이트코드)
                  리얼 머신을 위한 코드 X
                  코드 전체를 번역
                  단순 번역만을 위한 번역기
                  중간 코드 까지의 단계를 수행

  - Interpreter : $ java
                  .class 파일을 실행
                  리얼 머신을 위한 코드로 변환
                  JRE (JVM)
                  당장 실행에 필요한 부분만 번역
                  JIT (Just In Time) 번역기
                  중간 코드 부터 최적화, 물리코드 까지의 단계 수행

  ----- 컴파일러가 수행 -----
  1단계 : 형태소 분석
  2단계 : 구문 분석
  3단계 : 의미 분석
  ----- 인터프리터가 수행 -----
  4단계 : 중간 코드
  5단계 : 최적화
  6단계 : 물리코드

  - 실행 속도 개선 위해 번역기 2개 사용

# ===========================================================================

[ 자바 언어 특징 ]
  - 간결성
  - 언어에 컬렉션 포함
  - 완전한 객체지향 언어

# ===========================================================================

[ WORA ]
  - 자바는 WORA를 위해 만들어진 플랫폼이자 언어
  - Writ Once Run Anywhere
  - OS 종류에 상관없이 같은 자바 프로그램을 실행가능
  - OS에 독립적
  - Java Platform이 이를 가능하게함
  - 컴파일러로 Writ Once 후 배포하여 인터프리터가 Run Anywhere

# ===========================================================================
